{"ast":null,"code":"import _objectSpread from \"/home/daniel/Documents/Learnify_Front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { authHeader, userHeader, searchHeader } from \"../helpers/auth-header\";\nimport { authAddress, signupAddress, profileAddress, subjectAddress, professorAddress } from \"../constants/back-address\";\nimport { removeState } from \"../store/localStorage\";\nexport var userService = {\n  login: login,\n  logout: logout,\n  register: register,\n  getAll: getAll,\n  getById: getById,\n  update: update,\n  getSubjects: getSubjects,\n  getProfessors: getProfessors,\n  delete: _delete\n};\n\nfunction login(email, password) {\n  var requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password\n    })\n  };\n  return fetch(authAddress, requestOptions).then(handleResponse).then(function (token) {\n    // localStorage.setItem(\"token\");\n    return token;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  removeState();\n}\n\nfunction getAll() {\n  var requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(\"/users\", requestOptions).then(handleResponse);\n}\n\nfunction getById(id, token) {\n  var requestOptions = {\n    method: \"GET\",\n    headers: userHeader(token)\n  };\n  return fetch(\"\".concat(profileAddress, \"/\").concat(id), requestOptions).then(handleResponse).then(function (response) {\n    return response;\n  });\n}\n\nfunction getProfessors(name, token) {\n  var requestOptionsName = {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": token,\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      name: \"%\".concat(name, \"%\")\n    })\n  };\n  return fetch(\"\".concat(professorAddress), requestOptionsName).then(handleResponse).then(function (response) {\n    return response;\n  });\n}\n\nfunction getSubjects(name, token) {\n  var requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": token,\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      name: \"%\".concat(name, \"%\")\n    })\n  };\n  return fetch(\"\".concat(subjectAddress), requestOptions).then(handleResponse).then(function (response) {\n    console.log(response + \"    RESPUESTA\");\n    return response;\n  });\n}\n\nfunction register(user) {\n  var email = user.email,\n      password = user.password,\n      password_confirmation = user.password_confirmation,\n      firstname = user.firstname,\n      lastname = user.lastname,\n      career_id = user.career_id,\n      role_id = user.role_id;\n  var newUser = {\n    user: {\n      name: firstname,\n      last_name: lastname,\n      email: email,\n      password: password,\n      password_confirmation: password_confirmation,\n      role_id: role_id,\n      career_id: career_id\n    }\n  };\n  var admin = {\n    email: \"admin@example.com.co\",\n    password: \"123456789\"\n  };\n  return login(admin.email, admin.password).then(function (token) {\n    var requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": token.auth_token.toString(),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newUser)\n    };\n    return fetch(signupAddress, requestOptions).then(handleResponse).then(function (user_returned) {});\n  });\n}\n\nfunction update(user) {\n  var requestOptions = {\n    method: \"PUT\",\n    headers: _objectSpread({}, authHeader(), {\n      \"Content-Type\": \"application/json\"\n    }),\n    body: JSON.stringify(user)\n  };\n  return fetch(\"/users/\".concat(user.id), requestOptions).then(handleResponse);\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  var requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader()\n  };\n  return fetch(\"/users/\".concat(id), requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(function (text) {\n    // console.log(text);\n    var data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // window.location.reload(true);\n      }\n\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/home/daniel/Documents/Learnify_Front/src/redux/services/user-services.js"],"names":["authHeader","userHeader","searchHeader","authAddress","signupAddress","profileAddress","subjectAddress","professorAddress","removeState","userService","login","logout","register","getAll","getById","update","getSubjects","getProfessors","delete","_delete","email","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","token","id","response","name","requestOptionsName","console","log","user","password_confirmation","firstname","lastname","career_id","role_id","newUser","last_name","admin","auth_token","toString","user_returned","text","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import { authHeader, userHeader, searchHeader } from \"../helpers/auth-header\";\nimport { authAddress, signupAddress, profileAddress, subjectAddress, professorAddress } from \"../constants/back-address\";\nimport { removeState } from \"../store/localStorage\";\n\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  getSubjects,\n  getProfessors,\n  delete: _delete\n};\n\nfunction login(email, password) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ email, password })\n  };\n\n  return fetch(authAddress, requestOptions)\n    .then(handleResponse)\n    .then(token => {\n      // localStorage.setItem(\"token\");\n      return token;\n    });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  removeState();\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n\n  return fetch(`/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id, token) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: userHeader(token)\n  };\n\n  return fetch(`${profileAddress}/${id}`, requestOptions).then(handleResponse).then(response => {\n    return response;\n  });\n}\n\nfunction getProfessors(name, token) {\n  const requestOptionsName = {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": token,\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      name: `%${name}%`\n    })\n  };\n\n  return fetch(`${professorAddress}`, requestOptionsName).then(handleResponse).then(response => {\n    return response;\n  });\n}\n\nfunction getSubjects(name, token) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": token,\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      name: `%${name}%`\n    })\n  };\n\n  return fetch(`${subjectAddress}`, requestOptions).then(handleResponse).then(response => {\n    console.log(response + \"    RESPUESTA\");\n    return response;\n  });\n}\n\nfunction register(user) {\n\n  const { email, password, password_confirmation, firstname, lastname, career_id, role_id } = user;\n  const newUser = {\n    user: {\n      name: firstname,\n      last_name: lastname,\n      email,\n      password: password,\n      password_confirmation: password_confirmation,\n      role_id,\n      career_id\n    }\n  };\n\n  const admin = {\n    email: \"admin@example.com.co\",\n    password: \"123456789\"\n  };\n\n\n  return login(admin.email, admin.password).then(\n    token => {\n\n      const requestOptions = {\n        method: \"POST\",\n        headers: { \"Authorization\": token.auth_token.toString(), \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(newUser)\n      };\n\n      return fetch(signupAddress, requestOptions).\n        then(handleResponse).then(\n          user_returned => {\n\n          }\n        );\n    }\n  );\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(), \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(user)\n  };\n\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader()\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    // console.log(text);\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        // window.location.reload(true);\n      }\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}