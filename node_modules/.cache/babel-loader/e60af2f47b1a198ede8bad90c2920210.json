{"ast":null,"code":"import _toConsumableArray from \"/home/daniel/Documents/Learnify_Front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// array in local storage for registered users\nvar users = JSON.parse(localStorage.getItem(\"users\")) || [];\nexport function configureFakeBackend() {\n  var realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    return new Promise(function (resolve, reject) {\n      // wrap in timeout to simulate server api call\n      setTimeout(function () {\n        // authenticate\n        if (url.endsWith(\"/users/authenticate\") && opts.method === \"POST\") {\n          // get parameters from post request\n          var params = JSON.parse(opts.body); // find if any user matches login credentials\n\n          var filteredUsers = users.filter(function (user) {\n            return user.email === params.email && user.password === params.password;\n          });\n\n          if (filteredUsers.length) {\n            // if login details are valid return user details and fake jwt token\n            var user = filteredUsers[0];\n            var responseJson = {\n              id: user.id,\n              username: user.email,\n              firstname: user.firstname,\n              lastname: user.lastname,\n              token: \"fake-jwt-token\"\n            };\n            resolve({\n              ok: true,\n              text: function text() {\n                return Promise.resolve(JSON.stringify(responseJson));\n              }\n            });\n          } else {\n            // else return error\n            reject(\"Username or password is incorrect\");\n          }\n\n          return;\n        } // get users\n\n\n        if (url.endsWith(\"/users\") && opts.method === \"GET\") {\n          // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === \"Bearer fake-jwt-token\") {\n            resolve({\n              ok: true,\n              text: function text() {\n                return Promise.resolve(JSON.stringify(users));\n              }\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject(\"Unauthorised\");\n          }\n\n          return;\n        } // get user by id\n\n\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === \"GET\") {\n          // check for fake auth token in header and return user if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === \"Bearer fake-jwt-token\") {\n            // find user by id in users array\n            var urlParts = url.split(\"/\");\n            var id = parseInt(urlParts[urlParts.length - 1]);\n            var matchedUsers = users.filter(function (user) {\n              return user.id === id;\n            });\n\n            var _user = matchedUsers.length ? matchedUsers[0] : null; // respond 200 OK with user\n\n\n            resolve({\n              ok: true,\n              text: function text() {\n                return JSON.stringify(_user);\n              }\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject(\"Unauthorised\");\n          }\n\n          return;\n        } // register user\n\n\n        if (url.endsWith(\"/users/register\") && opts.method === \"POST\") {\n          // get new user object from post body\n          var newUser = JSON.parse(opts.body); // validation\n\n          var duplicateUser = users.filter(function (user) {\n            return user.email === newUser.email;\n          }).length;\n\n          if (duplicateUser) {\n            reject('Email \"' + newUser.email + '\" is already taken');\n            return;\n          } // save new user\n\n\n          newUser.id = users.length ? Math.max.apply(Math, _toConsumableArray(users.map(function (user) {\n            return user.id;\n          }))) + 1 : 1;\n          users.push(newUser);\n          localStorage.setItem(\"users\", JSON.stringify(users)); // respond 200 OK\n\n          resolve({\n            ok: true,\n            text: function text() {\n              return Promise.resolve();\n            }\n          });\n          return;\n        } // delete user\n\n\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === \"DELETE\") {\n          // check for fake auth token in header and return user if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === \"Bearer fake-jwt-token\") {\n            // find user by id in users array\n            var _urlParts = url.split(\"/\");\n\n            var _id = parseInt(_urlParts[_urlParts.length - 1]);\n\n            for (var i = 0; i < users.length; i++) {\n              var _user2 = users[i];\n\n              if (_user2.id === _id) {\n                // delete user\n                users.splice(i, 1);\n                localStorage.setItem(\"users\", JSON.stringify(users));\n                break;\n              }\n            } // respond 200 OK\n\n\n            resolve({\n              ok: true,\n              text: function text() {\n                return Promise.resolve();\n              }\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject(\"Unauthorised\");\n          }\n\n          return;\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(function (response) {\n          return resolve(response);\n        });\n      }, 500);\n    });\n  };\n}","map":{"version":3,"sources":["/home/daniel/Documents/Learnify_Front/src/redux/helpers/fake-backend.js"],"names":["users","JSON","parse","localStorage","getItem","configureFakeBackend","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","params","body","filteredUsers","filter","user","email","password","length","responseJson","id","username","firstname","lastname","token","ok","text","stringify","headers","Authorization","match","urlParts","split","parseInt","matchedUsers","newUser","duplicateUser","Math","max","map","push","setItem","i","splice","then","response"],"mappings":"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","sourcesContent":["// array in local storage for registered users\nlet users = JSON.parse(localStorage.getItem(\"users\")) || [];\n\nexport function configureFakeBackend() {\n  let realFetch = window.fetch;\n  window.fetch = function (url, opts) {\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(() => {\n        // authenticate\n        if (url.endsWith(\"/users/authenticate\") && opts.method === \"POST\") {\n          // get parameters from post request\n          let params = JSON.parse(opts.body);\n\n          // find if any user matches login credentials\n          let filteredUsers = users.filter(user => {\n            return (\n              user.email === params.email &&\n              user.password === params.password\n            );\n          });\n\n          if (filteredUsers.length) {\n            // if login details are valid return user details and fake jwt token\n            let user = filteredUsers[0];\n            let responseJson = {\n              id: user.id,\n              username: user.email,\n              firstname: user.firstname,\n              lastname: user.lastname,\n              token: \"fake-jwt-token\"\n            };\n            resolve({\n              ok: true,\n              text: () => Promise.resolve(JSON.stringify(responseJson))\n            });\n          } else {\n            // else return error\n            reject(\"Username or password is incorrect\");\n          }\n\n          return;\n        }\n\n        // get users\n        if (url.endsWith(\"/users\") && opts.method === \"GET\") {\n          // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n          if (\n            opts.headers &&\n            opts.headers.Authorization === \"Bearer fake-jwt-token\"\n          ) {\n            resolve({\n              ok: true,\n              text: () => Promise.resolve(JSON.stringify(users))\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject(\"Unauthorised\");\n          }\n\n          return;\n        }\n\n        // get user by id\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === \"GET\") {\n          // check for fake auth token in header and return user if valid, this security is implemented server side in a real application\n          if (\n            opts.headers &&\n            opts.headers.Authorization === \"Bearer fake-jwt-token\"\n          ) {\n            // find user by id in users array\n            let urlParts = url.split(\"/\");\n            let id = parseInt(urlParts[urlParts.length - 1]);\n            let matchedUsers = users.filter(user => {\n              return user.id === id;\n            });\n            let user = matchedUsers.length ? matchedUsers[0] : null;\n\n            // respond 200 OK with user\n            resolve({ ok: true, text: () => JSON.stringify(user) });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject(\"Unauthorised\");\n          }\n\n          return;\n        }\n\n        // register user\n        if (url.endsWith(\"/users/register\") && opts.method === \"POST\") {\n          // get new user object from post body\n          let newUser = JSON.parse(opts.body);\n\n          // validation\n          let duplicateUser = users.filter(user => {\n            return user.email === newUser.email;\n          }).length;\n          if (duplicateUser) {\n            reject('Email \"' + newUser.email + '\" is already taken');\n            return;\n          }\n\n          // save new user\n          newUser.id = users.length\n            ? Math.max(...users.map(user => user.id)) + 1\n            : 1;\n          users.push(newUser);\n          localStorage.setItem(\"users\", JSON.stringify(users));\n\n          // respond 200 OK\n          resolve({ ok: true, text: () => Promise.resolve() });\n\n          return;\n        }\n\n        // delete user\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === \"DELETE\") {\n          // check for fake auth token in header and return user if valid, this security is implemented server side in a real application\n          if (\n            opts.headers &&\n            opts.headers.Authorization === \"Bearer fake-jwt-token\"\n          ) {\n            // find user by id in users array\n            let urlParts = url.split(\"/\");\n            let id = parseInt(urlParts[urlParts.length - 1]);\n            for (let i = 0; i < users.length; i++) {\n              let user = users[i];\n              if (user.id === id) {\n                // delete user\n                users.splice(i, 1);\n                localStorage.setItem(\"users\", JSON.stringify(users));\n                break;\n              }\n            }\n\n            // respond 200 OK\n            resolve({ ok: true, text: () => Promise.resolve() });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject(\"Unauthorised\");\n          }\n\n          return;\n        }\n\n        // pass through any requests not handled above\n        realFetch(url, opts).then(response => resolve(response));\n      }, 500);\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}