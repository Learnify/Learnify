{"ast":null,"code":"import { userConstants } from \"../constants/types\";\nimport { userService } from \"../services/user-services\";\nimport { alertActions } from \"./alert-actions\";\nimport { history } from \"../helpers/history\";\nexport var userActions = {\n  login: login,\n  logout: logout,\n  register: register,\n  getAll: getAll,\n  _delete: _delete\n};\n\nfunction login(email, password) {\n  return function (dispatch) {\n    dispatch(request({\n      email: email\n    }));\n    userService.login(email, password).then(function (response) {\n      var user = {\n        auth_token: response.auth_token,\n        id: response.user.id\n      };\n      dispatch(success(user));\n      history.push(\"/Profile\");\n    }, function (error) {\n      console.log(error);\n      dispatch(failure(error));\n      dispatch(alertActions.error(error));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user: user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user: user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error: error\n    };\n  }\n}\n\nfunction logout() {\n  userService.logout();\n  history.push(\"/\");\n  return {\n    type: userConstants.LOGOUT\n  };\n}\n\nfunction register(user) {\n  return function (dispatch) {\n    dispatch(request(user));\n    userService.register(user).then(function (user) {\n      dispatch(success());\n      dispatch(alertActions.success(\"Registration successful\"));\n      history.push(\"/\");\n    }, function (error) {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user: user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user: user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error: error\n    };\n  }\n}\n\nfunction getAll() {\n  return function (dispatch) {\n    dispatch(request());\n    userService.getAll().then(function (users) {\n      return dispatch(success(users));\n    }, function (error) {\n      return dispatch(failure(error));\n    });\n  };\n\n  function request() {\n    return {\n      type: userConstants.GETALL_REQUEST\n    };\n  }\n\n  function success(users) {\n    return {\n      type: userConstants.GETALL_SUCCESS,\n      users: users\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.GETALL_FAILURE,\n      error: error\n    };\n  }\n}\n\nfunction _delete(id) {\n  return function (dispatch) {\n    dispatch(request(id));\n    userService.delete(id).then(function (user) {\n      dispatch(success(id));\n    }, function (error) {\n      dispatch(failure(id, error));\n    });\n  };\n\n  function request(id) {\n    return {\n      type: userConstants.DELETE_REQUEST,\n      id: id\n    };\n  }\n\n  function success(id) {\n    return {\n      type: userConstants.DELETE_SUCCESS,\n      id: id\n    };\n  }\n\n  function failure(id, error) {\n    return {\n      type: userConstants.DELETE_FAILURE,\n      id: id,\n      error: error\n    };\n  }\n}","map":{"version":3,"sources":["/home/daniel/Documents/Learnify_Front/src/redux/actions/user-actions.js"],"names":["userConstants","userService","alertActions","history","userActions","login","logout","register","getAll","_delete","email","password","dispatch","request","then","response","user","auth_token","id","success","push","error","console","log","failure","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","users","GETALL_REQUEST","GETALL_SUCCESS","GETALL_FAILURE","delete","DELETE_REQUEST","DELETE_SUCCESS","DELETE_FAILURE"],"mappings":"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","sourcesContent":["import { userConstants } from \"../constants/types\";\nimport { userService } from \"../services/user-services\";\nimport { alertActions } from \"./alert-actions\";\nimport { history } from \"../helpers/history\";\n\nexport const userActions = {\n  login,\n  logout,\n  register,\n  getAll,\n  _delete\n};\n\nfunction login(email, password) {\n  return dispatch => {\n    dispatch(request({ email }));\n\n    userService.login(email, password).then(\n      response => {\n        const user = {\n          auth_token: response.auth_token,\n          id: response.user.id\n        };\n        dispatch(success(user));\n        history.push(\"/Profile\");\n      },\n      error => {\n        console.log(error);\n        dispatch(failure(error));\n        dispatch(alertActions.error(error));\n      }\n    );\n  };\n\n  function request(user) {\n    return { type: userConstants.LOGIN_REQUEST, user };\n  }\n  function success(user) {\n    return { type: userConstants.LOGIN_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: userConstants.LOGIN_FAILURE, error };\n  }\n}\n\nfunction logout() {\n  userService.logout();\n  history.push(\"/\");\n  return { type: userConstants.LOGOUT };\n}\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n\n    userService.register(user).then(\n      user => {\n        dispatch(success());\n        dispatch(alertActions.success(\"Registration successful\"));\n        history.push(\"/\");\n      },\n      error => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error));\n      }\n    );\n  };\n\n  function request(user) {\n    return { type: userConstants.REGISTER_REQUEST, user };\n  }\n  function success(user) {\n    return { type: userConstants.REGISTER_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: userConstants.REGISTER_FAILURE, error };\n  }\n}\n\nfunction getAll() {\n  return dispatch => {\n    dispatch(request());\n\n    userService\n      .getAll()\n      .then(\n        users => dispatch(success(users)),\n        error => dispatch(failure(error))\n      );\n  };\n\n  function request() {\n    return { type: userConstants.GETALL_REQUEST };\n  }\n  function success(users) {\n    return { type: userConstants.GETALL_SUCCESS, users };\n  }\n  function failure(error) {\n    return { type: userConstants.GETALL_FAILURE, error };\n  }\n}\n\nfunction _delete(id) {\n  return dispatch => {\n    dispatch(request(id));\n\n    userService.delete(id).then(\n      user => {\n        dispatch(success(id));\n      },\n      error => {\n        dispatch(failure(id, error));\n      }\n    );\n  };\n\n  function request(id) {\n    return { type: userConstants.DELETE_REQUEST, id };\n  }\n  function success(id) {\n    return { type: userConstants.DELETE_SUCCESS, id };\n  }\n  function failure(id, error) {\n    return { type: userConstants.DELETE_FAILURE, id, error };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}